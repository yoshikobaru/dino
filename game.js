// –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
let totalDPS = parseInt(localStorage.getItem('totalDPS')) || 0;
let totalGameEarnings = parseInt(localStorage.getItem('totalGameEarnings')) || 0;
let availableGames = parseInt(localStorage.getItem('availableGames'));
if (availableGames === null) {
    availableGames = 5;
    localStorage.setItem('availableGames', availableGames);
} else if (availableGames === 0) {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∏ 0 —Å–µ—Ä–¥—Ü–∞—Ö –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è 0
    localStorage.setItem('availableGames', 0);
}
let nextHeartTime = parseInt(localStorage.getItem('nextHeartTime')) || Date.now();
let gameIframe = null;
let startButton = document.getElementById('startButton');
let livesDisplay = document.getElementById('lives');
let timerDisplay;
let gamePage;
let gameContainer;
let timerActive = false;
let heartTimers = [];
let lastHeartRecoveryTime = 0;
let tasks = JSON.parse(localStorage.getItem('dailyTasks')) || { daily: [] };
let playedCount = parseInt(localStorage.getItem('playedCount')) || 0;
let gameProgress = parseInt(localStorage.getItem('gameProgress')) || 0;
let gameTaskTimer = null;
let gameTaskStartTime = parseInt(localStorage.getItem('gameTaskStartTime')) || 0;
const shopButton = document.getElementById('shopButton');
shopButton?.addEventListener('click', openShopModal);
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
window.updateTimer = function() {
    const now = Date.now();
    let updated = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–¥—Ü–∞
    if (nextHeartTime > 0 && now >= nextHeartTime && availableGames < 5) {
        availableGames++;
        updated = true;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if (availableGames < 5) {
            nextHeartTime = now + 300000; // 5 –º–∏–Ω—É—Ç
        } else {
            nextHeartTime = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–ª–∏ 5 —Å–µ—Ä–¥–µ—Ü
        }
        
        localStorage.setItem('availableGames', availableGames);
        localStorage.setItem('nextHeartTime', nextHeartTime);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    let remainingTime = 0;
    if (nextHeartTime > 0 && availableGames < 5) {
        remainingTime = Math.max(0, Math.ceil((nextHeartTime - now) / 1000));
    }

    const minutes = Math.floor(remainingTime / 60);
    const seconds = remainingTime % 60;

    return {
        time: `${minutes}:${seconds.toString().padStart(2, '0')}`,
        availableGames: availableGames,
        updated: updated
    };
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è DOM
let timerInterval = setInterval(() => {
    const timerData = updateTimer();
    
    if (document.getElementById('timer')) {
        document.getElementById('timer').textContent = availableGames < 5 ? `–°–ª–µ–¥—É—é—â–µ–µ —Å–µ—Ä–¥—Ü–µ —á–µ—Ä–µ–∑: ${timerData.time}` : '';
    }
    if (document.getElementById('lives')) {
        document.getElementById('lives').innerHTML = '‚ù§Ô∏è'.repeat(timerData.availableGames) + 'üñ§'.repeat(5 - timerData.availableGames);
    }
}, 1000);

function handleJump(event) {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è desktop
    if (event.type !== 'touchstart' && event.type !== 'touchend') {
        event.preventDefault();
        event.stopPropagation();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å iframe
    if (gameIframe && gameIframe.contentWindow) {
        gameIframe.contentWindow.postMessage({ 
            type: 'jump'
        }, '*');
    }
}
function setupEventListeners() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document.addEventListener('keydown', (event) => {
        if (event.code === 'Space' || event.key === ' ') {
            handleJump(event);
        }
    }, { passive: false });

    document.addEventListener('touchstart', handleJump, { passive: true });
    document.addEventListener('click', handleJump, { passive: false });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è gameContainer
    if (gameContainer) {
        gameContainer.addEventListener('touchstart', handleJump, { passive: true });
        gameContainer.addEventListener('click', handleJump, { passive: false });
    }
}
function updateAvailableGamesDisplay() {
    const timerData = updateTimer();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–¥—Ü–∞
    if (livesDisplay) {
        livesDisplay.innerHTML = '‚ù§Ô∏è'.repeat(timerData.availableGames) + 'üñ§'.repeat(5 - timerData.availableGames);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
    if (timerDisplay) {
        if (timerData.availableGames < 5) {
            timerDisplay.textContent = `–°–ª–µ–¥—É—é—â–µ–µ —Å–µ—Ä–¥—Ü–µ —á–µ—Ä–µ–∑: ${timerData.time}`;
            timerDisplay.style.display = 'block';
        } else {
            timerDisplay.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    updateStartButtonState();
};
function loadGame() {
    if (!gameContainer) return;
    
    gameIframe = createGameIframe();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è iframe
    setupEventListeners();
    
    updateAvailableGamesDisplay();
}
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    gamePage = document.getElementById('game-page');
    gameContainer = document.getElementById('gameContainer');
    startButton = document.getElementById('startButton');
    livesDisplay = document.getElementById('lives');
    
    // –°–æ–∑–¥–∞–µ–º timerDisplay
    timerDisplay = document.createElement('div');
    timerDisplay.id = 'timer';
    if (livesDisplay) {
        livesDisplay.parentNode.insertBefore(timerDisplay, livesDisplay.nextSibling);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
    nextHeartTime = parseInt(localStorage.getItem('nextHeartTime')) || 0;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—É
    if (gameContainer) {
        loadGame();
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    createShopModal();
    updateAvailableGamesDisplay();
    loadUserSkins();
});
// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è iframe
function createGameIframe() {
    if (!gameIframe) {
        gameIframe = document.createElement('iframe');
        gameIframe.src = 'game/index.html';
        gameIframe.style.width = '100%';
        gameIframe.style.height = '300px';
        gameIframe.style.border = 'none';
        document.getElementById('gameContainer').appendChild(gameIframe);
    }
    return gameIframe;
}
window.showPopup = function(message, duration = 3000) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ø–∞–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingPopup = document.getElementById('custom-popup');
    if (existingPopup) {
        existingPopup.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ø–∞–ø–∞
    const popup = document.createElement('div');
    popup.id = 'custom-popup';
    popup.className = 'fixed top-0 left-0 right-0 z-50 transform -translate-y-full transition-transform duration-300 ease-out';
    
    const innerDiv = document.createElement('div');
    innerDiv.className = 'bg-black/90 text-yellow-400 px-6 py-4 mx-auto max-w-md shadow-lg rounded-b-lg border-b-2 border-x-2 border-yellow-400';
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'text-center font-bold text-lg';
    messageDiv.textContent = message;
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    innerDiv.appendChild(messageDiv);
    popup.appendChild(innerDiv);
    document.body.appendChild(popup);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
    requestAnimationFrame(() => {
        popup.classList.remove('-translate-y-full');
        popup.classList.add('translate-y-0');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ–ø–∞–ø —á–µ—Ä–µ–∑ duration –º—Å
        setTimeout(() => {
            popup.classList.remove('translate-y-0');
            popup.classList.add('-translate-y-full');
            
            // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                popup.remove();
            }, 300); // –í—Ä–µ–º—è —Ä–∞–≤–Ω–æ duration-300 –∏–∑ –∫–ª–∞—Å—Å–∞
        }, duration);
    });
}
startButton.addEventListener('click', () => {
    if (startButton.classList.contains('claim-mode')) {
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
        }
        // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
        const gameScore = parseInt(startButton.dataset.pendingScore);
        totalDPS += gameScore;
        totalGameEarnings += gameScore;
        localStorage.setItem('totalDPS', totalDPS);
        localStorage.setItem('totalGameEarnings', totalGameEarnings);
        
        updateTotalScore();
        updateGameEarningsDisplay();
        updateGameScoreDisplay();
        updatePlayedCountTask();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤
        if (window.updateAllBalances) {
            window.updateAllBalances();
        }
        
        showPopup(`–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${gameScore} DPS! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${totalDPS} DPS`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ iframe –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–∫–ª–∞–º—ã
        if (gameIframe && gameIframe.contentWindow) {
            gameIframe.contentWindow.postMessage({ type: 'hideAd' }, '*');
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä–µ–∂–∏–º Start
        startButton.classList.remove('claim-mode');
        updateStartButtonState();
    } else {
        if (availableGames > 0) {
            // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    const elementsToHide = [
        document.querySelector('h1'),
        document.getElementById('lives'),
        document.getElementById('timer'),
        document.getElementById('startButton'),
        document.getElementById('achievementsButton'),
        document.getElementById('shopButton')
    ];
    
    elementsToHide.forEach(el => {
        if (el) el.style.display = 'none';
    });
    
   // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
   document.addEventListener('click', handleJump);
   document.addEventListener('touchstart', handleJump, { passive: true });
   document.addEventListener('keydown', (event) => {
       if (event.code === 'Space' || event.key === ' ') {
           handleJump(event);
       }
   });
    startButton.style.display = 'none';
            availableGames--;
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–µ—Ä–¥—Ü–∞
            if (availableGames < 5 && nextHeartTime === 0) {
                nextHeartTime = Date.now() + 300000; // 5 –º–∏–Ω—É—Ç
                localStorage.setItem('nextHeartTime', nextHeartTime);
            }
            
            localStorage.setItem('availableGames', availableGames);
            updateAvailableGamesDisplay();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π
            playedCount++;
            localStorage.setItem('playedCount', playedCount.toString());
            updatePlayedCountTask();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è "–°—ã–≥—Ä–∞—Ç—å 5 —Ä–∞–∑"
            const currentProgress = parseInt(localStorage.getItem('gameProgress')) || 0;
            if (currentProgress < 5) {
                if (currentProgress === 0) {
                    localStorage.setItem('gameTaskStartTime', Date.now().toString());
                }
                localStorage.setItem('gameProgress', (currentProgress + 1).toString());
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            if (gameIframe && gameIframe.contentWindow) {
                gameIframe.contentWindow.postMessage({ type: 'startGame' }, '*');
            }
        }
        updateStartButtonState();
    }
});

// –í—ã–∑—ã–≤–∞–µ–º updateStartButtonState –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è availableGames
document.addEventListener('DOMContentLoaded', updateStartButtonState);

const ACHIEVEMENTS = {
    // COMMON (–∑–µ–ª–µ–Ω—ã–µ)
    FIRST_HUNDRED: {
        id: 'first_hundred',
        name: '–ü–µ—Ä–≤–∞—è —Å–æ—Ç–Ω—è',
        description: '–ù–∞–±—Ä–∞—Ç—å 100 –æ—á–∫–æ–≤',
        icon: 'üíØ',
        rarity: 'common',
        condition: (score) => score >= 100
    },
    MASTER_JUMPER: {
        id: 'master_jumper',
        name: '–ú–∞—Å—Ç–µ—Ä –ø—Ä—ã–∂–∫–æ–≤',
        description: '–°–¥–µ–ª–∞—Ç—å 5 –ø—Ä—ã–∂–∫–æ–≤ –ø–æ–¥—Ä—è–¥',
        icon: 'ü¶ò',
        rarity: 'common',
        condition: (_, combo) => combo >= 5
    },
    FIRST_MINUTE: {
        id: 'first_minute',
        name: '–ü–µ—Ä–≤–∞—è –º–∏–Ω—É—Ç–∞',
        description: '–ü—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è 1 –º–∏–Ω—É—Ç—É',
        icon: '‚è±Ô∏è',
        rarity: 'common',
        condition: (_, __, timeAlive) => timeAlive >= 60
    },

    // RARE (—Å–∏–Ω–∏–µ)
    SPEED_MASTER: {
        id: 'speed_master',
        name: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –º–∞—Å—Ç–µ—Ä',
        description: '–ù–∞–±—Ä–∞—Ç—å 300 –æ—á–∫–æ–≤',
        icon: 'üèÉ',
        rarity: 'rare',
        condition: (score) => score >= 300
    },
    COMBO_KING: {
        id: 'combo_king',
        name: '–ö–æ—Ä–æ–ª—å –∫–æ–º–±–æ',
        description: '–°–¥–µ–ª–∞—Ç—å 10 –ø—Ä—ã–∂–∫–æ–≤ –ø–æ–¥—Ä—è–¥',
        icon: 'üëë',
        rarity: 'rare',
        condition: (_, combo) => combo >= 10
    },

    // EPIC (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ)
    NIGHT_RUNNER: {
        id: 'night_runner',
        name: '–ù–æ—á–Ω–æ–π –±–µ–≥—É–Ω',
        description: '–ù–∞–±—Ä–∞—Ç—å 200 –æ—á–∫–æ–≤ –≤ –Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ',
        icon: 'üåô',
        rarity: 'epic',
        condition: (score, _, __, theme) => score >= 200 && theme === 2
    },
    SURVIVOR: {
        id: 'survivor',
        name: '–í—ã–∂–∏–≤—à–∏–π',
        description: '–ò–≥—Ä–∞—Ç—å 5 –º–∏–Ω—É—Ç –±–µ–∑ —Å–º–µ—Ä—Ç–∏',
        icon: '‚≠êÔ∏è',
        rarity: 'epic',
        condition: (_, __, timeAlive) => timeAlive >= 300
    }
};

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π
const RARITY_COLORS = {
    common: 'text-green-400 border-green-400',
    rare: 'text-blue-400 border-blue-400',
    epic: 'text-purple-400 border-purple-400'
};

// –î–æ–±–∞–≤–ª—è–µ–º HTML –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
const achievementNotification = document.createElement('div');
achievementNotification.className = 'fixed top-4 left-0 right-0 flex justify-center items-center z-50 pointer-events-none';
achievementNotification.style.display = 'none';
document.body.appendChild(achievementNotification);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
function showAchievementNotification(achievement) {
    achievementNotification.innerHTML = `
        <div class="bg-black/90 px-6 py-4 rounded-lg border-2 flex items-center space-x-3 ${RARITY_COLORS[achievement.rarity]}">
            <span class="text-2xl">${achievement.icon}</span>
            <div>
                <div class="font-bold">${achievement.name}</div>
                <div class="text-sm">${achievement.description}</div>
                <div class="text-xs mt-1 ${RARITY_COLORS[achievement.rarity]}">${achievement.rarity.toUpperCase()}</div>
            </div>
        </div>
    `;
    achievementNotification.style.display = 'flex';
    
    setTimeout(() => {
        achievementNotification.style.display = 'none';
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements(score, combo, timeAlive, theme) {
    const unlockedAchievements = JSON.parse(localStorage.getItem('achievements') || '[]');
    
    Object.values(ACHIEVEMENTS).forEach(achievement => {
        if (!unlockedAchievements.includes(achievement.id) && 
            achievement.condition(score, combo, timeAlive, theme)) {
            
            unlockedAchievements.push(achievement.id);
            localStorage.setItem('achievements', JSON.stringify(unlockedAchievements));
            
            // –í–∏–±—Ä–∞—Ü–∏—è
            if (window.Telegram && window.Telegram.WebApp) {
                window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
            }
            
            showAchievementNotification(achievement);
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç iframe
window.addEventListener('message', (event) => {
    if (event.data.type === 'checkAchievements') {
        const unlockedAchievements = JSON.parse(localStorage.getItem('achievements') || '[]');
        
        Object.values(ACHIEVEMENTS).forEach(achievement => {
            if (!unlockedAchievements.includes(achievement.id) && 
                achievement.condition(
                    event.data.score,
                    event.data.combo,
                    event.data.timeAlive,
                    event.data.theme
                )) {
                
                unlockedAchievements.push(achievement.id);
                localStorage.setItem('achievements', JSON.stringify(unlockedAchievements));
                
                // –í–∏–±—Ä–∞—Ü–∏—è
                if (window.Telegram && window.Telegram.WebApp) {
                    window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                achievementNotification.innerHTML = `
                    <div class="bg-black/90 text-yellow-400 px-6 py-4 rounded-lg border-2 border-yellow-400 flex items-center space-x-3">
                        <span class="text-2xl">${achievement.icon}</span>
                        <div>
                            <div class="font-bold">${achievement.name}</div>
                            <div class="text-sm">${achievement.description}</div>
                        </div>
                    </div>
                `;
                achievementNotification.style.display = 'flex';
                
                setTimeout(() => {
                    achievementNotification.style.display = 'none';
                }, 3000);
            }
        });
    }
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function showAchievements() {
    const achievementsModal = document.getElementById('achievementsModal');
    const achievementsList = document.getElementById('achievementsList');
    const unlockedAchievements = JSON.parse(localStorage.getItem('achievements') || '[]');
    
    achievementsList.innerHTML = '';
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    const groupedAchievements = {
        epic: [],
        rare: [],
        common: []
    };
    
    Object.values(ACHIEVEMENTS).forEach(achievement => {
        groupedAchievements[achievement.rarity].push(achievement);
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
    Object.entries(groupedAchievements).forEach(([rarity, achievements]) => {
        achievementsList.innerHTML += `
            <div class="mb-4">
                <h3 class="text-lg font-bold ${RARITY_COLORS[rarity]} mb-2">
                    ${rarity.toUpperCase()}
                </h3>
                <div class="space-y-2">
                    ${achievements.map(achievement => {
                        const isUnlocked = unlockedAchievements.includes(achievement.id);
                        return `
                            <div class="bg-gray-800 rounded-lg p-4 flex items-center space-x-4 
                                ${isUnlocked ? `border-2 ${RARITY_COLORS[achievement.rarity]}` : ''}">
                                <span class="text-3xl">${isUnlocked ? achievement.icon : 'üîí'}</span>
                                <div>
                                    <h3 class="font-bold ${isUnlocked ? RARITY_COLORS[achievement.rarity] : 'text-gray-400'}">
                                        ${achievement.name}
                                    </h3>
                                    <p class="text-sm text-gray-400">${achievement.description}</p>
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
    });
    
    achievementsModal.classList.remove('hidden');
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.getElementById('achievementsButton')?.addEventListener('click', showAchievements);
document.getElementById('closeAchievements')?.addEventListener('click', () => {
    document.getElementById('achievementsModal').classList.add('hidden');
});

function updateStartButtonState() {
    if (!startButton) return;
    
    if (availableGames === 0 && !startButton.classList.contains('claim-mode')) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ä–¥–µ—Ü –∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ claim
        startButton.classList.remove('bg-yellow-400', 'text-black');
        startButton.classList.add('bg-gray-200', 'text-gray-600', 'opacity-80');
        startButton.innerHTML = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–¥–µ—Ü';
        startButton.disabled = true;
    } else if (startButton.classList.contains('claim-mode')) {
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤ —Ä–µ–∂–∏–º–µ claim
        startButton.classList.remove('bg-yellow-400', 'text-black');
        startButton.classList.add('bg-gray-200', 'text-gray-600', 'opacity-80', 'hover:opacity-100');
        startButton.innerHTML = 'Claim x1 DPS';
        startButton.disabled = false;
    } else {
        // –û–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å—Ç—å —Å–µ—Ä–¥—Ü–∞)
        startButton.classList.remove('bg-gray-200', 'text-gray-600', 'opacity-80', 'hover:opacity-100');
        startButton.classList.add('bg-yellow-400', 'text-black');
        startButton.innerHTML = 'Start';
        startButton.disabled = false;
    }
}

window.addEventListener('message', (event) => {
    if (event.data.type === 'gameOver') {
     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
     const elementsToShow = [
        document.querySelector('h1'),
        document.getElementById('lives'),
        document.getElementById('timer'),
        document.getElementById('achievementsButton'),
        document.getElementById('shopButton')
    ];
    
    elementsToShow.forEach(el => {
        if (el) el.style.display = '';
    });
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä—ã–∂–∫–∞
    document.removeEventListener('click', handleJump);
    document.removeEventListener('touchstart', handleJump);
    document.removeEventListener('keydown', handleJump);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä–µ–∂–∏–º–µ claim
        startButton.style.display = 'block';
        startButton.classList.add('claim-mode');
        startButton.innerHTML = 'Claim x1 DPS';
        startButton.dataset.pendingScore = event.data.score;
        startButton.classList.remove('bg-yellow-400', 'text-black');
        startButton.classList.add('bg-gray-200', 'text-gray-600', 'opacity-80', 'hover:opacity-100');
        
        if (availableGames === 0) {
            livesDisplay.innerHTML = '–ò–≥—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å';
        }
                
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
            const gameScore = event.data.score;
            const highScore = parseInt(localStorage.getItem('project.github.chrome_dino.high_score')) || 0;
            if (gameScore > highScore) {
                localStorage.setItem('project.github.chrome_dino.high_score', gameScore.toString());
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 500 –∏ 1000 DPS
                if (gameScore >= 1000) {
                    const record1000DPSCompleted = localStorage.getItem('record1000DPSCompleted') === 'true';
                    if (!record1000DPSCompleted) {
                        showPopup('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–±—Ä–∞–ª–∏ 1000 DPS –∑–∞ –∏–≥—Ä—É. –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –≤ –∑–∞–¥–∞–Ω–∏—è—Ö!');
                    }
                } else if (gameScore >= 500) {
                    const record500DPSCompleted = localStorage.getItem('record500DPSCompleted') === 'true';
                    if (!record500DPSCompleted) {
                        showPopup('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–±—Ä–∞–ª–∏ 500 DPS –∑–∞ –∏–≥—Ä—É. –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –≤ –∑–∞–¥–∞–Ω–∏—è—Ö!');
                    }
                }
            }
        }
    });

    document.querySelector('button[data-page="game"]').addEventListener('click', () => {
        if (gamePage.style.display !== 'none') {
            loadGame();
            updateAvailableGamesDisplay();
            updateTimer();
            updateStartButtonState();
        }
    });

//let totalGameEarnings = parseInt(localStorage.getItem('totalGameEarnings')) || 0;
function updateGameEarningsDisplay() {
    const gameEarningsElements = document.querySelectorAll('.bg-yellow-400 .text-sm.font-bold.text-black');
    gameEarningsElements.forEach(element => {
        const parentDiv = element.closest('.bg-yellow-400');
        const labelElement = parentDiv.querySelector('.text-xs.text-black');
        if (labelElement && labelElement.textContent.trim() === 'Game') {
            element.textContent = `+${totalGameEarnings} DPS`;
        }
    });
}
function updateTotalScore() {
    const totalScoreElement = document.querySelector('.text-3xl.font-bold.text-black');
    if (totalScoreElement) {
        totalScoreElement.textContent = `${totalDPS} DPS`;
    }
}


// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç–∞, —á–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.updateTotalScore = updateTotalScore;
window.updateGameEarningsDisplay = updateGameEarningsDisplay;

// –§—É–Ω–∫—Ü—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∂–µ–Ω–∏—è –æ—á–∫–æ–≤ –∑–∞ –∏–≥—Ä—É
function updateGameScoreDisplay() {
    const gameScoreElement = document.getElementById('gameScore');
    const totalGameEarnings = parseInt(localStorage.getItem('totalGameEarnings')) || 0; // –ü–æ–ª—É—á–∞–µ–º –∏–∑ localStorage
    if (gameScoreElement) {
        gameScoreElement.textContent = `+${totalGameEarnings} DPS`; // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–∏–µ
    }
}

function saveGameState() {
    localStorage.setItem('availableGames', availableGames);
    localStorage.setItem('heartTimers', JSON.stringify(heartTimers));
    localStorage.setItem('lastHeartRecoveryTime', lastHeartRecoveryTime);
    updateAvailableGamesDisplay(); 
}

// –ò–∑–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadGameState
function loadGameState() {
    const savedAvailableGames = localStorage.getItem('availableGames');
    const savedHeartTimers = localStorage.getItem('heartTimers');
    const savedLastHeartRecoveryTime = localStorage.getItem('lastHeartRecoveryTime');
    const savedNextHeartTime = parseInt(localStorage.getItem('nextHeartTime'));

    if (savedAvailableGames !== null) {
        availableGames = parseInt(savedAvailableGames);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ–ª–∞–π–Ω-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (savedNextHeartTime && availableGames < 5) {
            const now = Date.now();
            const timePassed = now - savedNextHeartTime;
            const heartsToRecover = Math.floor(timePassed / 300000); // –î–µ–ª–∏–º –Ω–∞ 5 –º–∏–Ω—É—Ç
            
            if (heartsToRecover > 0) {
                availableGames = Math.min(5, availableGames + heartsToRecover);
                
                // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–µ—Ä–¥—Ü–∞
                if (availableGames < 5) {
                    nextHeartTime = now + 300000; // –°–ª–µ–¥—É—é—â–µ–µ —Å–µ—Ä–¥—Ü–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
                } else {
                    nextHeartTime = 0; // –í—Å–µ —Å–µ—Ä–¥—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                localStorage.setItem('availableGames', availableGames);
                localStorage.setItem('nextHeartTime', nextHeartTime);
            }
        }
    } else {
        availableGames = 5;
        localStorage.setItem('availableGames', availableGames);
    }

    if (savedHeartTimers !== null) {
        heartTimers = JSON.parse(savedHeartTimers);
    }
    if (savedLastHeartRecoveryTime !== null) {
        lastHeartRecoveryTime = parseInt(savedLastHeartRecoveryTime);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    updateTimer();
    updateAvailableGamesDisplay();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.updateTaskEarningsDisplay = updateTaskEarningsDisplay;

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
function updateGameTaskProgress() {
    const gameTask = tasks.daily.find(task => task.name === "–°—ã–≥—Ä–∞—Ç—å 5 —Ä–∞–∑");
    if (gameTask && gameTask.cooldown <= 0) {
        if (!gameTask.isTimerRunning) {
            startGameTaskTimer();
        }
        gameTask.progress++;
        if (gameTask.progress === gameTask.maxProgress) {
            clearTimeout(gameTask.timer);
            gameTask.isTimerRunning = false;
        }
        renderTasks('daily');
        saveDailyTasks();
    }
}

// –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é startGame
function startGame() {
    if (availableGames > 0) {
        availableGames--;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (nextHeartTime === 0) {
            nextHeartTime = Date.now() + 300000; // 5 –º–∏–Ω—É—Ç
            localStorage.setItem('nextHeartTime', nextHeartTime);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–¥–µ—Ü
        localStorage.setItem('availableGames', availableGames);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateAvailableGamesDisplay();
        if (startButton) startButton.style.display = 'none';
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        if (gameIframe && gameIframe.contentWindow) {
            gameIframe.contentWindow.postMessage({ type: 'start' }, '*');
        }
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
function startGameTaskTimer() {
    if (gameTaskTimer) {
        clearTimeout(gameTaskTimer);
    }
    
    gameTaskTimer = setTimeout(() => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –º–∏–Ω—É—Ç—ã
        gameProgress = 0;
        localStorage.setItem('gameProgress', gameProgress);
        gameTaskStartTime = 0;
        localStorage.setItem('gameTaskStartTime', gameTaskStartTime);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        renderTasks('daily');
    }, 60000); // 1 –º–∏–Ω—É—Ç–∞
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
function checkGameTaskTime() {
    if (gameTaskStartTime > 0) {
        const now = Date.now();
        const timeElapsed = now - gameTaskStartTime;
        
        if (timeElapsed >= 60000) { // –ü—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞
            gameProgress = 0;
            localStorage.setItem('gameProgress', gameProgress);
            gameTaskStartTime = 0;
            localStorage.setItem('gameTaskStartTime', gameTaskStartTime);
            if (gameTaskTimer) {
                clearTimeout(gameTaskTimer);
            }
        }
    }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
function startGameTaskTimer() {
    const gameTask = tasks.daily.find(task => task.name === "–°—ã–≥—Ä–∞—Ç—å 5 —Ä–∞–∑");
    if (gameTask && !gameTask.isTimerRunning) {
        gameTask.isTimerRunning = true;
        gameTask.timerStartTime = Date.now();
        gameTask.timer = setTimeout(() => {
            gameTask.isTimerRunning = false;
            gameTask.progress = 0;
            renderTasks('daily');
            saveDailyTasks();
        }, 60000); // 1 –º–∏–Ω—É—Ç–∞
        saveDailyTasks();
    }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ game.js
function renderTasks(category) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ main.js
}

function saveDailyTasks() {
    localStorage.setItem('dailyTasks', JSON.stringify(tasks));
}

// –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é:
function updatePlayedCountTask() {
    const playedCountTask = tasks.daily.find(task => task.name === "–°—ã–≥—Ä–∞—Ç—å 25 —Ä–∞–∑");
    if (playedCountTask) {
        playedCountTask.playedCount = playedCount;
        if (playedCount >= 25) {
            playedCountTask.isCompleted = true;
        }
        renderTasks('daily');!
        saveDailyTasks();
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Ä–µ–∫–æ—Ä–¥ DPS
function checkAndCompleteRecordTask(taskName) {
    const task = tasks.daily.find(t => t.name === taskName);
    if (!task || task.isCompleted) return;

    const requiredScore = taskName === "–ù–∞–±—Ä–∞—Ç—å 500 DPS –∑–∞ –∏–≥—Ä—É" ? 500 : 1000;
    const highScore = parseInt(localStorage.getItem('project.github.chrome_dino.high_score')) || 0;
    const taskCompletedKey = `record${requiredScore}DPSCompleted`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
    if (localStorage.getItem(taskCompletedKey) === 'true') {
        showPopup('–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
        return;
    }

    // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ—Ä–¥–∞
    if (highScore < requiredScore) {
        showPopup(`–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥: ${highScore} DPS. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å ${requiredScore} DPS!`);
        return;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ –Ω–∞ 1000 DPS
    if (requiredScore === 1000) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ 500 DPS
        if (localStorage.getItem('record500DPSCompleted') !== 'true') {
            showPopup('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ "–ù–∞–±—Ä–∞—Ç—å 500 DPS –∑–∞ –∏–≥—Ä—É"!');
            return;
        }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    task.isCompleted = true;
    localStorage.setItem(taskCompletedKey, 'true');
    totalDPS += task.dps;
    totalTaskEarnings += task.dps;
    
    localStorage.setItem('totalDPS', totalDPS.toString());
    localStorage.setItem('totalTaskEarnings', totalTaskEarnings.toString());
    
    updateTotalScore();
    updateTaskEarningsDisplay();
    renderTasks('daily');
    saveTasks();
    
    showPopup(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${task.dps} DPS –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è "${taskName}"!`);
}
// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Adsgram
function loadAdsgramScript() {
    return new Promise((resolve, reject) => {
        if (window.Adsgram) {
            resolve();
            return;
        }
        const script = document.createElement('script');
        script.src = 'https://sad.adsgram.ai/js/sad.min.js';
        script.onload = resolve;
        script.onerror = reject;
        document.body.appendChild(script);
    });
}

let AdController;
async function initAdsgram() {
    try {
        await loadAdsgramScript();
        console.log('Adsgram SDK –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        AdController = window.Adsgram.init({ blockId: "5315" }); 
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Adsgram SDK:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Adsgram –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initAdsgram);

function updateStartButtonText(isClaim = false) {
    if (startButton) {
        if (isClaim) {
            startButton.innerHTML = 'Claim x1 DPS üò¢';
            startButton.classList.add('claim-mode');
            startButton.classList.remove('bg-yellow-400', 'text-black');
            startButton.classList.add('bg-gray-200', 'text-gray-600', 'opacity-80', 'hover:opacity-100');
        } else {
            startButton.innerHTML = 'Start';
            startButton.classList.remove('claim-mode');
            startButton.classList.remove('bg-gray-200', 'text-gray-600', 'opacity-80', 'hover:opacity-100');
            startButton.classList.add('bg-yellow-400', 'text-black');
        }
    }
}
// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∏–≥—Ä—ã
window.addEventListener('message', async (event) => {
    if (event.data.type === 'showAd') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É
        if (!AdController) {
            await initAdsgram();
        }
    
        try {
            const result = await AdController.show();
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–µ–∫–ª–∞–º—É', result);
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º x3 –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã
            const currentScore = event.data.currentScore;
            const gameScore = currentScore * 3;
            
            totalDPS += gameScore;
            totalGameEarnings += gameScore;
            localStorage.setItem('totalDPS', totalDPS);
            localStorage.setItem('totalGameEarnings', totalGameEarnings);
            
            updateTotalScore();
            updateGameEarningsDisplay();
            updateGameScoreDisplay();
            updatePlayedCountTask();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á
            if (window.updateTaskStatuses) {
                window.updateTaskStatuses('daily');
            }
            
            showPopup(`–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${gameScore} DPS (x3)! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${totalDPS} DPS`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ iframe –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–∫–ª–∞–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞
            if (gameIframe && gameIframe.contentWindow) {
                gameIframe.contentWindow.postMessage({ type: 'adWatched' }, '*');
            }
            
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ Start
            startButton.classList.remove('claim-mode');
            startButton.classList.remove('bg-gray-200', 'text-gray-600', 'opacity-80', 'hover:opacity-100');
            startButton.classList.add('bg-yellow-400', 'text-black');
            startButton.innerHTML = 'Start';
            startButton.disabled = availableGames === 0;
            delete startButton.dataset.pendingScore; // –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—á–µ—Ç
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–ª–∞–º—ã:', error);
        }
    } else if (event.data.type === 'gameOver') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞
        if (!startButton.dataset.pendingScore) {
            startButton.style.display = 'block';
            startButton.classList.add('claim-mode');
            startButton.innerHTML = 'Claim x1 DPS';
            startButton.dataset.pendingScore = event.data.score;
            startButton.classList.remove('bg-yellow-400', 'text-black');
            startButton.classList.add('bg-gray-200', 'text-gray-600', 'opacity-80', 'hover:opacity-100');
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
            playedCount = parseInt(localStorage.getItem('playedCount')) || 0;
            playedCount++;
            localStorage.setItem('playedCount', playedCount);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
            if (window.updateTaskStatuses) {
                window.updateTaskStatuses('daily');
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ä–¥–µ—Ü –æ—Ç–¥–µ–ª—å–Ω–æ
        if (availableGames === 0) {
            livesDisplay.innerHTML = '–ò–≥—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å';
        }
        updateAvailableGamesDisplay();
    }
});
let currentSkin = localStorage.getItem('currentDinoSkin') || 'default';
let availableSkins = JSON.parse(localStorage.getItem('availableSkins')) || {
    default: true,
    red: false,
    green: false
};
function setButtonLoading(button, isLoading) {
    if (isLoading) {
        button.disabled = true;
        button.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    } else {
        button.disabled = false;
        updateShopButtons(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    }
}
// –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞–≥–∞–∑–∏–Ω–∞
function createShopModal() {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black/50 flex items-center justify-center hidden';
    modal.id = 'shopModal';

    const content = document.createElement('div');
    content.className = 'bg-black rounded-lg p-6 max-w-md w-full mx-4 border border-yellow-400';
    content.innerHTML = `
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold text-yellow-400">–ú–∞–≥–∞–∑–∏–Ω —Å–∫–∏–Ω–æ–≤</h2>
            <button class="text-yellow-400 hover:text-yellow-500" onclick="closeShopModal()">‚úï</button>
        </div>
        <div class="grid grid-cols-2 gap-4">
            <div class="border border-yellow-400 rounded p-4 text-center bg-black">
                <img src="assets/dino-default.jpg" alt="Default Dino" class="w-16 h-16 mx-auto mb-2">
                <div class="font-bold text-yellow-400">–û–±—ã—á–Ω—ã–π</div>
                <button data-skin="default" class="mt-2 px-4 py-2 bg-gray-200 rounded" disabled>–í—ã–±—Ä–∞–Ω</button>
            </div>
            <div class="border border-yellow-400 rounded p-4 text-center bg-black">
        <img src="assets/dino-red.jpg" alt="Red Dino" class="w-16 h-16 mx-auto mb-2">
        <div class="font-bold text-yellow-400">–ö—Ä–∞—Å–Ω—ã–π</div>
        <button data-skin="red" data-price="100" class="mt-2 px-4 py-2 bg-black text-yellow-400 border border-yellow-400 hover:bg-yellow-400 hover:text-black transition-colors">
            –ö—É–ø–∏—Ç—å –∑–∞ <span class="text-white">100</span> ‚≠êÔ∏è
        </button>
    </div>
    <div class="border border-yellow-400 rounded p-4 text-center bg-black">
        <img src="assets/dino-green.jpg" alt="Green Dino" class="w-16 h-16 mx-auto mb-2">
        <div class="font-bold text-yellow-400">–ó–µ–ª–µ–Ω—ã–π</div>
        <button data-skin="green" data-price="100" class="mt-2 px-4 py-2 bg-black text-yellow-400 border border-yellow-400 hover:bg-yellow-400 hover:text-black transition-colors">
            –ö—É–ø–∏—Ç—å –∑–∞ <span class="text-white">100</span> ‚≠êÔ∏è
        </button>
    </div>
        </div>
    `;

    modal.appendChild(content);
    document.body.appendChild(modal);
    updateShopButtons();
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function openShopModal() {
    const modal = document.getElementById('shopModal');
    modal.classList.remove('hidden');
}

function closeShopModal() {
    const modal = document.getElementById('shopModal');
    modal.classList.add('hidden');
}
async function loadUserSkins() {
    try {
        const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
        const response = await fetch(`/get-user-skins?telegramId=${telegramId}`);
        const data = await response.json();
        
        if (data.skins) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤
            availableSkins = data.skins.reduce((acc, skin) => {
                acc[skin] = true;
                return acc;
            }, {});
            localStorage.setItem('availableSkins', JSON.stringify(availableSkins));
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫–∏–Ω
            currentSkin = localStorage.getItem('currentDinoSkin') || 'default';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
            updateShopButtons();
        }
    } catch (error) {
        console.error('Error loading user skins:', error);
    }
}
// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é purchaseSkin
window.purchaseSkin = async function(skinName, price) {
    const button = document.querySelector(`button[data-skin="${skinName}"]`);
    if (button) {
        button.disabled = true;
        button.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    }
    
    try {
        console.log('Attempting to purchase skin:', skinName, 'for price:', price); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
        const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
        const response = await fetch(`/create-skin-invoice?telegramId=${telegramId}&stars=${price}&skinName=${skinName}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Invoice data received:', data); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
        
        if (!data.slug) {
            throw new Error('No slug received from server');
        }

        localStorage.setItem('pendingSkin', JSON.stringify({
            skinName: skinName,
            price: price,
            timestamp: Date.now()
        }));

        window.Telegram.WebApp.openInvoice(data.slug);
        
    } catch (error) {
        console.error('Error in purchaseSkin:', error);
        localStorage.removeItem('pendingSkin');
        window.Telegram.WebApp.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞'
        });
    } finally {
        if (button) {
            button.disabled = false;
            updateShopButtons();
        }
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è Invoice
window.Telegram.WebApp.onEvent('invoiceClosed', async (data) => {
    console.log('Invoice closed with status:', data.status);
    
    if (data.status === 'paid') {
        try {
            const pendingSkin = localStorage.getItem('pendingSkin');
            if (!pendingSkin) return;

            const skinData = JSON.parse(pendingSkin);
            const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
            
            const response = await fetch(`/update-user-skins?telegramId=${telegramId}&skinName=${skinData.skinName}`);
            const responseData = await response.json();

            if (responseData.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–∏–Ω–∞—Ö
                availableSkins[skinData.skinName] = true;
                localStorage.setItem('availableSkins', JSON.stringify(availableSkins));
                
                // –í—ã–±–∏—Ä–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–∫–∏–Ω
                selectSkin(skinData.skinName);
                
                window.Telegram.WebApp.showPopup({
                    title: '‚ú® –£—Å–ø–µ—Ö!',
                    message: '–°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!'
                });
                
                updateShopButtons();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∫–∏–Ω–∞:', error);
        } finally {
            localStorage.removeItem('pendingSkin');
        }
    } else {
        localStorage.removeItem('pendingSkin');
    }
});
// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–∏–Ω–∞
window.selectSkin = function(skinName) {
    if (availableSkins[skinName]) {
        currentSkin = skinName;
        localStorage.setItem('currentDinoSkin', skinName);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ iframe –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∏–Ω–∞
        if (gameIframe && gameIframe.contentWindow) {
            gameIframe.contentWindow.postMessage({ 
                type: 'changeSkin', 
                skin: skinName 
            }, '*');
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º iframe –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (gameIframe) {
            const currentSrc = gameIframe.src;
            gameIframe.src = '';
            gameIframe.src = currentSrc;
        }
        
        updateShopButtons();
        showPopup('–°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
function updateShopButtons() {
    const modal = document.getElementById('shopModal');
    if (!modal) return;

    const buttons = modal.querySelectorAll('button[data-skin]');
    buttons.forEach(button => {
        const skinName = button.getAttribute('data-skin');
        const price = parseInt(button.getAttribute('data-price')) || 100;
        
        if (skinName) {
            if (availableSkins[skinName]) {
                // –ï—Å–ª–∏ —Å–∫–∏–Ω –∫—É–ø–ª–µ–Ω
                if (currentSkin === skinName) {
                    button.textContent = '–í—ã–±—Ä–∞–Ω';
                    button.disabled = true;
                    button.className = 'mt-2 px-4 py-2 bg-gray-200 text-gray-600 rounded cursor-not-allowed';
                } else {
                    button.textContent = '–í—ã–±—Ä–∞—Ç—å';
                    button.disabled = false;
                    button.className = 'mt-2 px-4 py-2 bg-black text-yellow-400 border border-yellow-400 hover:bg-yellow-400 hover:text-black transition-colors';
                    button.onclick = () => selectSkin(skinName);
                }
            } else {
                button.innerHTML = `–ö—É–ø–∏—Ç—å –∑–∞ <span class="text-white">${price}</span> ‚≠êÔ∏è`;
                button.className = 'mt-2 px-4 py-2 bg-black text-yellow-400 border border-yellow-400 hover:bg-yellow-400 hover:text-black transition-colors';
                button.onclick = () => {
                    console.log(`Purchase button clicked with price: ${price}`);
                    purchaseSkin(skinName, price);
                };
            }
        }
    });
}