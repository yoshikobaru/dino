import taskManager from './tasks.js';


let availableGames = parseInt(localStorage.getItem('availableGames'));
if (availableGames === null || isNaN(availableGames)) {
    availableGames = 5;
    localStorage.setItem('availableGames', '5');
} else if (availableGames === 0) {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∏ 0 —Å–µ—Ä–¥—Ü–∞—Ö –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è 0
    localStorage.setItem('availableGames', '0');
}
let nextHeartTime = parseInt(localStorage.getItem('nextHeartTime')) || 0;
let lastHeartCheckTime = parseInt(localStorage.getItem('lastHeartCheckTime')) || Date.now();
let gameIframe = null;
let startButton = document.getElementById('startButton');
let livesDisplay = document.getElementById('lives');
let timerDisplay;
let gamePage;
let canvas;
let canvas_ctx;
let gameContainer;
let timerActive = false;
let heartTimers = JSON.parse(localStorage.getItem('heartTimers')) || [];
let lastHeartRecoveryTime = 0;
let playedCount = parseInt(localStorage.getItem('playedCount')) || 0;
let gameProgress = parseInt(localStorage.getItem('gameProgress')) || 0;
let gameTaskTimer = null;
let gameTaskStartTime = parseInt(localStorage.getItem('gameTaskStartTime')) || 0;
const shopButton = document.getElementById('shopButton');
shopButton?.addEventListener('click', openShopModal);

function updateTimer() {
    const now = Date.now();
    let updated = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–¥—Ü–∞
    while (heartTimers.length > 0 && now >= heartTimers[0] && availableGames < 5) {
        availableGames++;
        updated = true;
        heartTimers.shift();
        
        nextHeartTime = heartTimers[0] || 0;
        
        localStorage.setItem('availableGames', availableGames);
        localStorage.setItem('heartTimers', JSON.stringify(heartTimers));
        localStorage.setItem('nextHeartTime', nextHeartTime);
    }

    let remainingTime = 0;
    if (heartTimers.length > 0 && availableGames < 5) {
        remainingTime = Math.max(0, Math.ceil((heartTimers[0] - now) / 1000));
    }

    const minutes = Math.floor(remainingTime / 60);
    const seconds = remainingTime % 60;

    return {
        time: `${minutes}:${seconds.toString().padStart(2, '0')}`,
        availableGames: availableGames,
        updated: updated
    };
}

let timerInterval = setInterval(() => {
    const timerData = updateTimer();
    
    if (document.getElementById('timer')) {
        document.getElementById('timer').textContent = availableGames < 5 ? `Next heart through: ${timerData.time}` : '';
    }
    if (document.getElementById('lives')) {
        document.getElementById('lives').innerHTML = '‚ù§Ô∏è'.repeat(timerData.availableGames) + 'üñ§'.repeat(5 - timerData.availableGames);
    }
}, 1000);

function handleJump(event) {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è desktop
    if (event.type !== 'touchstart' && event.type !== 'touchend') {
        event.preventDefault();
        event.stopPropagation();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å iframe
    if (gameIframe && gameIframe.contentWindow) {
        gameIframe.contentWindow.postMessage({ 
            type: 'jump'
        }, '*');
    }
}
async function scheduleHeartNotification() {
    if (availableGames === 0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–µ—Ä–¥—Ü–µ
        try {
            const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
            await fetch('/schedule-heart-notification', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Init-Data': window.Telegram.WebApp.initData
                },
                body: JSON.stringify({ telegramId })
            });
        } catch (error) {
            console.error('Error scheduling heart notification:', error);
        }
    }
}
function setupEventListeners() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document.addEventListener('keydown', (event) => {
        if (event.code === 'Space' || event.key === ' ') {
            handleJump(event);
        }
    }, { passive: false });

    document.addEventListener('touchstart', handleJump, { passive: true });
    document.addEventListener('click', handleJump, { passive: false });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è gameContainer
    if (gameContainer) {
        gameContainer.addEventListener('touchstart', handleJump, { passive: true });
        gameContainer.addEventListener('click', handleJump, { passive: false });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–¥–µ—Ü
function checkAndUpdateHearts() {
    const now = Date.now();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã
    while (heartTimers.length > 0 && now >= heartTimers[0] && availableGames < 5) {
        availableGames++;
        heartTimers.shift();
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–¥—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    if (availableGames >= 5) {
        heartTimers = [];
        nextHeartTime = 0;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    localStorage.setItem('availableGames', availableGames);
    localStorage.setItem('heartTimers', JSON.stringify(heartTimers));
    localStorage.setItem('nextHeartTime', nextHeartTime);
}

function updateAvailableGamesDisplay() {
    const timerData = updateTimer();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–¥—Ü–∞
    if (livesDisplay) {
        livesDisplay.innerHTML = '‚ù§Ô∏è'.repeat(timerData.availableGames) + 'üñ§'.repeat(5 - timerData.availableGames);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
    if (timerDisplay) {
        if (timerData.availableGames < 5) {
            timerDisplay.textContent = `Next heart through: ${timerData.time}`;
            timerDisplay.style.display = 'block';
        } else {
            timerDisplay.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    updateStartButtonState();
};
function loadGame() {
    if (!gameContainer) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ iframe
    if (!gameIframe) {
        gameIframe = createGameIframe();
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ iframe
        setupEventListeners();
    }
    
    updateAvailableGamesDisplay();
}
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    gamePage = document.getElementById('game-page');
    gameContainer = document.getElementById('gameContainer');
    startButton = document.getElementById('startButton');
    livesDisplay = document.getElementById('lives');
    
    // –°–æ–∑–¥–∞–µ–º timerDisplay
    timerDisplay = document.createElement('div');
    timerDisplay.id = 'timer';
    if (livesDisplay) {
        livesDisplay.parentNode.insertBefore(timerDisplay, livesDisplay.nextSibling);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
    nextHeartTime = parseInt(localStorage.getItem('nextHeartTime')) || 0;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—É
    if (gameContainer) {
        loadGame();
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    createShopModal();
    checkAndUpdateHearts();
    updateAvailableGamesDisplay();
    loadUserSkins();
});
// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è iframe
function createGameIframe() {
    if (!gameIframe) {
        gameIframe = document.createElement('iframe');
        gameIframe.src = 'game/index.html';
        gameIframe.style.width = '100%';
        gameIframe.style.height = '300px';
        gameIframe.style.border = 'none';
        document.getElementById('gameContainer').appendChild(gameIframe);
    }
    return gameIframe;
}
window.showPopup = function(message, duration = 3000) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ø–∞–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingPopup = document.getElementById('custom-popup');
    if (existingPopup) {
        existingPopup.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ø–∞–ø–∞
    const popup = document.createElement('div');
    popup.id = 'custom-popup';
    popup.className = 'fixed top-0 left-0 right-0 z-50 transform -translate-y-full transition-transform duration-300 ease-out';
    
    const innerDiv = document.createElement('div');
    innerDiv.className = 'bg-black/90 text-yellow-400 px-6 py-4 mx-auto max-w-md shadow-lg rounded-b-lg border-b-2 border-x-2 border-yellow-400';
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'text-center font-bold text-lg';
    messageDiv.textContent = message;
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    innerDiv.appendChild(messageDiv);
    popup.appendChild(innerDiv);
    document.body.appendChild(popup);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
    requestAnimationFrame(() => {
        popup.classList.remove('-translate-y-full');
        popup.classList.add('translate-y-0');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ–ø–∞–ø —á–µ—Ä–µ–∑ duration –º—Å
        setTimeout(() => {
            popup.classList.remove('translate-y-0');
            popup.classList.add('-translate-y-full');
            
            // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                popup.remove();
            }, 300); // –í—Ä–µ–º—è —Ä–∞–≤–Ω–æ duration-300 –∏–∑ –∫–ª–∞—Å—Å–∞
        }, duration);
    });
}
startButton.addEventListener('click', async () => {
    if (startButton.classList.contains('claim-mode')) {
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
        }
        const gameScore = parseInt(startButton.dataset.pendingScore);
        const currentHighScore = parseInt(localStorage.getItem('project.github.chrome_dino.high_score')) || 0;

        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (gameScore > currentHighScore) {
            localStorage.setItem('project.github.chrome_dino.high_score', gameScore.toString());   
        }

        // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
        }
        
        await updateBalance(gameScore, 'game');
        
        updateTotalScore();
        updateGameEarningsDisplay();
        updateGameScoreDisplay();
        updatePlayedCountTask();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤
        if (window.updateAllBalances) {
            window.updateAllBalances();
        }
        
        showPopup(`You earned ${gameScore} DPS! Your new balance: ${totalDPS} DPS`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ iframe –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–∫–ª–∞–º—ã
        if (gameIframe && gameIframe.contentWindow) {
            gameIframe.contentWindow.postMessage({ type: 'hideAd' }, '*');
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä–µ–∂–∏–º Start
        startButton.classList.remove('claim-mode');
        delete startButton.dataset.pendingScore; // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        updateStartButtonState();
    } else {
        if (availableGames > 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ gameProgress –∑–¥–µ—Å—å
            let gameProgress = parseInt(localStorage.getItem('gameProgress')) || 0;
            const gameTaskStartTime = parseInt(localStorage.getItem('gameTaskStartTime')) || 0;
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∏–≥—Ä–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤
            if (gameProgress === 0 || Date.now() - gameTaskStartTime > 43200000) {
                gameProgress = 1;
                localStorage.setItem('gameTaskStartTime', Date.now().toString());
            } else if (gameProgress < 5) {
                gameProgress++;
            }
            
            localStorage.setItem('gameProgress', gameProgress.toString());
            
            // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    const elementsToHide = [
        document.querySelector('h1'),
        document.getElementById('lives'),
        document.getElementById('timer'),
        document.getElementById('startButton'),
        document.getElementById('achievementsButton'),
        document.getElementById('shopButton')
    ];
    
    elementsToHide.forEach(el => {
        if (el) el.style.display = 'none';
    });
    
   // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
   document.addEventListener('click', handleJump);
   document.addEventListener('touchstart', handleJump, { passive: true });
   document.addEventListener('keydown', (event) => {
       if (event.code === 'Space' || event.key === ' ') {
           handleJump(event);
       }
   });
    startButton.style.display = 'none';
            availableGames--;
            await scheduleHeartNotification();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è heartTimers
            const now = Date.now();
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ
            if (availableGames === 4 && heartTimers.length === 0) {
                nextHeartTime = now + 300000;
                heartTimers.push(nextHeartTime);
            } else if (availableGames < 5) {
                // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–µ—Ä–¥–µ—Ü
                const lastTimer = heartTimers.length > 0 ? 
                    Math.max(...heartTimers) : 
                    now;
                const newTimer = Math.max(lastTimer + 300000, now + 300000);
                heartTimers.push(newTimer);
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            heartTimers.sort((a, b) => a - b);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º nextHeartTime –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —Ç–∞–π–º–µ—Ä
            nextHeartTime = heartTimers[0] || 0;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤ localStorage
            localStorage.setItem('availableGames', availableGames);
            localStorage.setItem('heartTimers', JSON.stringify(heartTimers));
            localStorage.setItem('nextHeartTime', nextHeartTime);
            
            updateAvailableGamesDisplay();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π
            playedCount++;
            localStorage.setItem('playedCount', playedCount.toString());
            updatePlayedCountTask();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            if (gameIframe && gameIframe.contentWindow) {
                gameIframe.contentWindow.postMessage({ type: 'startGame' }, '*');
            }
        }
        updateStartButtonState();
    }
});
// –í—ã–∑—ã–≤–∞–µ–º updateStartButtonState –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è availableGames
document.addEventListener('DOMContentLoaded', updateStartButtonState);

const ACHIEVEMENTS = {
    // COMMON (–∑–µ–ª–µ–Ω—ã–µ)
    FIRST_HUNDRED: {
        id: 'first_hundred',
        name: 'First hundred',
        description: 'Get 100 points',
        icon: 'üíØ',
        rarity: 'common',
        condition: (score) => score >= 100
    },
    MASTER_JUMPER: {
        id: 'master_jumper',
        name: 'Master jumper',
        description: 'Make 5 jumps in a row',
        icon: 'ü¶ò',
        rarity: 'common',
        condition: (_, combo) => combo >= 5
    },
    FIRST_MINUTE: {
        id: 'first_minute',
        name: 'First minute',
        description: 'Stay alive for 1 minute',
        icon: '‚è±Ô∏è',
        rarity: 'common',
        condition: (_, __, timeAlive) => timeAlive >= 60
    },

    // RARE (—Å–∏–Ω–∏–µ)
    SPEED_MASTER: {
        id: 'speed_master',
        name: 'Speed master',
        description: 'Get 300 points',
        icon: 'üèÉ',
        rarity: 'rare',
        condition: (score) => score >= 300
    },
    COMBO_KING: {
        id: 'combo_king',
        name: 'Combo king',
        description: 'Make 10 jumps in a row',
        icon: 'üëë',
        rarity: 'rare',
        condition: (_, combo) => combo >= 10
    },

    // EPIC (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ)
    NIGHT_RUNNER: {
        id: 'night_runner',
        name: 'Night runner',
        description: 'Get 200 points in night mode',
        icon: 'üåô',
        rarity: 'epic',
        condition: (score, _, __, theme) => score >= 200 && theme === 2
    },
    SURVIVOR: {
        id: 'survivor',
        name: 'Survivor',
        description: 'Play 5 minutes without dying',
        icon: '‚≠êÔ∏è',
        rarity: 'epic',
        condition: (_, __, timeAlive) => timeAlive >= 300
    }
};

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π
const RARITY_COLORS = {
    common: 'text-green-400 border-green-400',
    rare: 'text-blue-400 border-blue-400',
    epic: 'text-purple-400 border-purple-400'
};

// –î–æ–±–∞–≤–ª—è–µ–º HTML –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
const achievementNotification = document.createElement('div');
achievementNotification.className = 'fixed top-4 left-0 right-0 flex justify-center items-center z-50 pointer-events-none';
achievementNotification.style.display = 'none';
document.body.appendChild(achievementNotification);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
function showAchievementNotification(achievement) {
    achievementNotification.innerHTML = `
        <div class="bg-black/90 px-6 py-4 rounded-lg border-2 flex items-center space-x-3 ${RARITY_COLORS[achievement.rarity]}">
            <span class="text-2xl">${achievement.icon}</span>
            <div>
                <div class="font-bold">${achievement.name}</div>
                <div class="text-sm">${achievement.description}</div>
                <div class="text-xs mt-1 ${RARITY_COLORS[achievement.rarity]}">${achievement.rarity.toUpperCase()}</div>
            </div>
        </div>
    `;
    achievementNotification.style.display = 'flex';
    
    setTimeout(() => {
        achievementNotification.style.display = 'none';
    }, 3000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç iframe
window.addEventListener('message', (event) => {
    if (event.data.type === 'checkAchievements') {
        const unlockedAchievements = JSON.parse(localStorage.getItem('achievements') || '[]');
        
        Object.values(ACHIEVEMENTS).forEach(achievement => {
            if (!unlockedAchievements.includes(achievement.id) && 
                achievement.condition(
                    event.data.score,
                    event.data.combo,
                    event.data.timeAlive,
                    event.data.theme
                )) {
                
                unlockedAchievements.push(achievement.id);
                localStorage.setItem('achievements', JSON.stringify(unlockedAchievements));
                
                // –í–∏–±—Ä–∞—Ü–∏—è
                if (window.Telegram && window.Telegram.WebApp) {
                    window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                achievementNotification.innerHTML = `
                    <div class="bg-black/90 text-yellow-400 px-6 py-4 rounded-lg border-2 border-yellow-400 flex items-center space-x-3">
                        <span class="text-2xl">${achievement.icon}</span>
                        <div>
                            <div class="font-bold">${achievement.name}</div>
                            <div class="text-sm">${achievement.description}</div>
                        </div>
                    </div>
                `;
                achievementNotification.style.display = 'flex';
                
                setTimeout(() => {
                    achievementNotification.style.display = 'none';
                }, 3000);
            }
        });
    }
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function showAchievements() {
    const achievementsModal = document.getElementById('achievementsModal');
    const achievementsList = document.getElementById('achievementsList');
    const unlockedAchievements = JSON.parse(localStorage.getItem('achievements') || '[]');
    
    achievementsList.innerHTML = '';
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    const groupedAchievements = {
        epic: [],
        rare: [],
        common: []
    };
    
    Object.values(ACHIEVEMENTS).forEach(achievement => {
        groupedAchievements[achievement.rarity].push(achievement);
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
    Object.entries(groupedAchievements).forEach(([rarity, achievements]) => {
        achievementsList.innerHTML += `
            <div class="mb-4">
                <h3 class="text-lg font-bold ${RARITY_COLORS[rarity]} mb-2">
                    ${rarity.toUpperCase()}
                </h3>
                <div class="space-y-2">
                    ${achievements.map(achievement => {
                        const isUnlocked = unlockedAchievements.includes(achievement.id);
                        return `
                            <div class="bg-gray-800 rounded-lg p-4 flex items-center space-x-4 
                                ${isUnlocked ? `border-2 ${RARITY_COLORS[achievement.rarity]}` : ''}">
                                <span class="text-3xl">${isUnlocked ? achievement.icon : 'üîí'}</span>
                                <div>
                                    <h3 class="font-bold ${isUnlocked ? RARITY_COLORS[achievement.rarity] : 'text-gray-400'}">
                                        ${achievement.name}
                                    </h3>
                                    <p class="text-sm text-gray-400">${achievement.description}</p>
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
    });
    
    achievementsModal.classList.remove('hidden');
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.getElementById('achievementsButton')?.addEventListener('click', showAchievements);
document.getElementById('closeAchievements')?.addEventListener('click', () => {
    document.getElementById('achievementsModal').classList.add('hidden');
});

function updateStartButtonState() {
    if (!startButton) return;
    
    if (availableGames === 0 && !startButton.classList.contains('claim-mode')) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ä–¥–µ—Ü –∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ claim
        startButton.classList.remove('bg-yellow-400', 'text-black');
        startButton.classList.add('bg-gray-200', 'text-gray-600', 'opacity-80');
        startButton.innerHTML = 'Not enough hearts';
        startButton.disabled = true;
    } else if (startButton.classList.contains('claim-mode')) {
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤ —Ä–µ–∂–∏–º–µ claim
        startButton.classList.remove('bg-yellow-400', 'text-black');
        startButton.classList.add('bg-gray-200', 'text-gray-600', 'opacity-80', 'hover:opacity-100');
        startButton.innerHTML = 'Claim x1 DPS';
        startButton.disabled = false;
    } else {
        // –û–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å—Ç—å —Å–µ—Ä–¥—Ü–∞)
        startButton.classList.remove('bg-gray-200', 'text-gray-600', 'opacity-80', 'hover:opacity-100');
        startButton.classList.add('bg-yellow-400', 'text-black');
        startButton.innerHTML = 'Start';
        startButton.disabled = false;
    }
}

window.addEventListener('message', async (event) => {
    if (event.data.type === 'gameOver') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const elementsToShow = [
            document.querySelector('h1'),
            document.getElementById('lives'),
            document.getElementById('timer'),
            document.getElementById('achievementsButton'),
            document.getElementById('shopButton')
        ];
        
        elementsToShow.forEach(el => {
            if (el) el.style.display = '';
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä—ã–∂–∫–∞
        document.removeEventListener('click', handleJump);
        document.removeEventListener('touchstart', handleJump);
        document.removeEventListener('keydown', handleJump);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞
        if (!startButton.dataset.pendingScore) {
            const score = parseInt(event.data.score);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º updatePlayCount
            let dailyPlayCount = parseInt(localStorage.getItem('dailyPlayCount') || '0');
            dailyPlayCount++;
            console.log('Updating dailyPlayCount to:', dailyPlayCount);
            localStorage.setItem('dailyPlayCount', dailyPlayCount.toString());
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ç–∞—Å–∫–∏
            taskManager.updatePlayCount();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä
            playedCount = parseInt(localStorage.getItem('playedCount')) || 0;
            playedCount++;
            localStorage.setItem('playedCount', playedCount.toString());
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–Ω–æ–ø–∫–∏
            startButton.style.display = 'block';
            startButton.classList.add('claim-mode');
            startButton.innerHTML = 'Claim x1 DPS';
            startButton.dataset.pendingScore = event.data.score;
            startButton.classList.remove('bg-yellow-400', 'text-black');
            startButton.classList.add('bg-gray-200', 'text-gray-600', 'opacity-80', 'hover:opacity-100');
            startButton.disabled = false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ—Ä–¥—ã
            const highScore = parseInt(localStorage.getItem('project.github.chrome_dino.high_score')) || 0;
            if (score > highScore) {
                localStorage.setItem('project.github.chrome_dino.high_score', score.toString());
                 // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∫–æ—Ä–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
           // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥ –∏–∑ localStorage –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const currentHighScore = parseInt(localStorage.getItem('project.github.chrome_dino.high_score'));
    fetch('/update-high-score', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Telegram-Init-Data': window.Telegram.WebApp.initData
        },
        body: JSON.stringify({
            telegramId: window.Telegram.WebApp.initDataUnsafe.user.id,
            highScore: currentHighScore
        })
    }).catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–æ—Ä–¥–∞:', error));
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 500 –∏ 1000 DPS
                if (score >= 1000) {
                    const record1000DPSCompleted = localStorage.getItem('record1000DPSCompleted') === 'true';
                    if (!record1000DPSCompleted) {
                        showPopup('Congratulations! You scored 1000 DPS per game. Get a reward in tasks!');
                    }
                } else if (score >= 500) {
                    const record500DPSCompleted = localStorage.getItem('record500DPSCompleted') === 'true';
                    if (!record500DPSCompleted) {
                        showPopup('Congratulations! You scored 500 DPS per game. Get a reward in tasks!');
                    }
                }
                
                taskManager.updateGameProgress(score);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ä–¥–µ—Ü
        if (availableGames === 0) {
            livesDisplay.innerHTML = 'Lives are over';
        }
        updateAvailableGamesDisplay();
        updateStartButtonState();
    }
});

    document.querySelector('button[data-page="game"]').addEventListener('click', () => {
        if (gamePage.style.display !== 'none') {
            loadGame();
            updateAvailableGamesDisplay();
            updateTimer();
            updateStartButtonState();
        }
    });

//let totalGameEarnings = parseInt(localStorage.getItem('totalGameEarnings')) || 0;
function updateGameEarningsDisplay() {
    const gameEarningsElements = document.querySelectorAll('.bg-yellow-400 .text-sm.font-bold.text-black');
    gameEarningsElements.forEach(element => {
        const parentDiv = element.closest('.bg-yellow-400');
        const labelElement = parentDiv.querySelector('.text-xs.text-black');
        if (labelElement && labelElement.textContent.trim() === 'Game') {
            element.textContent = `+${totalGameEarnings} DPS`;
        }
    });
}
function updateTotalScore() {
    const totalScoreElement = document.querySelector('.text-3xl.font-bold.text-black');
    if (totalScoreElement) {
        totalScoreElement.textContent = `${totalDPS} DPS`;
    }
}


// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç–∞, —á–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.updateTotalScore = updateTotalScore;
window.updateGameEarningsDisplay = updateGameEarningsDisplay;

// –§—É–Ω–∫—Ü—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∂–µ–Ω–∏—è –æ—á–∫–æ–≤ –∑–∞ –∏–≥—Ä—É
function updateGameScoreDisplay() {
    const gameScoreElement = document.getElementById('gameScore');
    const totalGameEarnings = parseInt(localStorage.getItem('totalGameEarnings')) || 0; // –ü–æ–ª—É—á–∞–µ–º –∏–∑ localStorage
    if (gameScoreElement) {
        gameScoreElement.textContent = `+${totalGameEarnings} DPS`; // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–∏–µ
    }
}

// –ò–∑–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadGameState
function loadGameState() {
    const savedAvailableGames = localStorage.getItem('availableGames');
    const savedHeartTimers = localStorage.getItem('heartTimers');
    const savedNextHeartTime = parseInt(localStorage.getItem('nextHeartTime'));
    const now = Date.now();

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º NaN –≤ availableGames
if (savedAvailableGames === 'NaN' || isNaN(parseInt(savedAvailableGames))) {
    console.log('Fixing NaN availableGames value');
    savedAvailableGames = '5';  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    localStorage.setItem('availableGames', savedAvailableGames);
}
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    heartTimers = savedHeartTimers ? JSON.parse(savedHeartTimers) : [];

    if (savedAvailableGames !== null) {
        availableGames = parseInt(savedAvailableGames);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
        if (isNaN(availableGames) || availableGames < 0 || availableGames > 5) {
            console.log('Correcting invalid availableGames value');
            availableGames = 0;
            localStorage.setItem('availableGames', availableGames.toString());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ–ª–∞–π–Ω-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (availableGames < 5) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
            const recoveredHearts = heartTimers.filter(time => now >= time).length;
            
            if (recoveredHearts > 0) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–¥–µ—Ü
                availableGames = Math.min(5, availableGames + recoveredHearts);
                
                // –û—á–∏—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
                heartTimers = heartTimers.filter(time => now < time);
                
                // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—â–µ —Å–µ—Ä–¥—Ü–∞
                if (availableGames < 5 && heartTimers.length === 0) {
                    nextHeartTime = now + 300000; // 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    heartTimers.push(nextHeartTime);
                } else if (availableGames === 5) {
                    nextHeartTime = 0;
                    heartTimers = [];
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                localStorage.setItem('availableGames', availableGames);
                localStorage.setItem('nextHeartTime', nextHeartTime);
                localStorage.setItem('heartTimers', JSON.stringify(heartTimers));
            }
        }
    } else {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        availableGames = 5;
        nextHeartTime = 0;
        heartTimers = [];
        localStorage.setItem('availableGames', availableGames);
        localStorage.setItem('nextHeartTime', nextHeartTime);
        localStorage.setItem('heartTimers', JSON.stringify(heartTimers));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    checkAndUpdateHearts();
    updateAvailableGamesDisplay();
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadGameState);

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
        loadGameState();
    }
});
// –î–æ–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
function updateGameTaskProgress() {
    const gameTask = taskManager.tasks.daily.find(task => task.name === "Play 5 times");
    if (gameTask && gameTask.cooldown <= 0) {
        if (!gameTask.isTimerRunning) {
            startGameTaskTimer();
        }
        gameTask.progress++;
        if (gameTask.progress === gameTask.maxProgress) {
            clearTimeout(gameTask.timer);
            gameTask.isTimerRunning = false;
            taskManager.handleTaskCompletion(gameTask);
        }
        taskManager.renderTasks('daily');
        taskManager.saveTasks();
    }
}

function startGameTaskTimer() {
    const gameTask = taskManager.tasks.daily.find(task => task.name === "Play 5 times");
    if (gameTask && !gameTask.isTimerRunning) {
        gameTask.isTimerRunning = true;
        gameTask.timerStartTime = Date.now();
        gameTask.timer = setTimeout(() => {
            gameTask.isTimerRunning = false;
            gameTask.progress = 0;
            taskManager.renderTasks('daily');
            taskManager.saveTasks();
        }, 60000); // 1 –º–∏–Ω—É—Ç–∞
        taskManager.saveTasks();
    }
}

function renderTasks(category) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ main.js
}

// –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é:
function updatePlayedCountTask() {
    const dailyTasks = taskManager.getTasks('daily');
    const play25Task = dailyTasks.find(task => task.name === "Play 25 times");
    if (play25Task && !play25Task.isCompleted) {
        const dailyPlayCount = parseInt(localStorage.getItem('dailyPlayCount')) || 0;
        play25Task.progress = Math.min(dailyPlayCount, play25Task.maxProgress);
        
        if (play25Task.progress >= play25Task.maxProgress) {
            play25Task.isCompleted = true;
            taskManager.handleTaskCompletion(play25Task);
        }
        taskManager.renderTasks('daily');
        taskManager.saveTasks();
    }
}
// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Adsgram
function loadAdsgramScript() {
    return new Promise((resolve, reject) => {
        if (window.Adsgram) {
            resolve();
            return;
        }
        const script = document.createElement('script');
        script.src = 'https://sad.adsgram.ai/js/sad.min.js';
        script.onload = resolve;
        script.onerror = reject;
        document.body.appendChild(script);
    });
}

let AdController;
async function initAdsgram() {
    try {
        await loadAdsgramScript();
        console.log('Adsgram SDK loaded successfully');
        AdController = window.Adsgram.init({ blockId: "5315" }); 
    } catch (error) {
        console.error('Error loading Adsgram SDK:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Adsgram –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initAdsgram);

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∏–≥—Ä—ã
window.addEventListener('message', async (event) => {
    if (event.data.type === 'showAd') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É
        if (!AdController) {
            await initAdsgram();
        }
    
        try {
            const result = await AdController.show();
            console.log('User watched the ad', result);
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º x3 –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã
            const currentScore = event.data.currentScore;
            const gameScore = currentScore * 3;
            await updateBalance(gameScore, 'game');
            
            updatePlayedCountTask();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á
            if (window.updateTaskStatuses) {
                window.updateTaskStatuses('daily');
            }
            
            showPopup(`You earned ${gameScore} DPS (x3)! Your new balance: ${window.totalDPS} DPS`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ iframe –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–∫–ª–∞–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞
            if (gameIframe && gameIframe.contentWindow) {
                gameIframe.contentWindow.postMessage({ type: 'adWatched' }, '*');
            }
            
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ Start
            startButton.classList.remove('claim-mode');
            startButton.classList.remove('bg-gray-200', 'text-gray-600', 'opacity-80', 'hover:opacity-100');
            startButton.classList.add('bg-yellow-400', 'text-black');
            startButton.innerHTML = 'Start';
            startButton.disabled = availableGames === 0;
            delete startButton.dataset.pendingScore; // –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—á–µ—Ç
            
        } catch (error) {
            console.error('Error showing the ad:', error);
        }
    }
});
let currentSkin = localStorage.getItem('currentDinoSkin') || 'default';
let availableSkins = JSON.parse(localStorage.getItem('availableSkins')) || {
    default: true,
    ninja: false,
    robot: false
};
// –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞–≥–∞–∑–∏–Ω–∞
function createShopModal() {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black/50 flex items-center justify-center hidden z-50';
    modal.id = 'shopModal';

    const content = document.createElement('div');
    content.className = 'bg-black rounded-lg p-6 max-w-md w-full mx-4 border border-yellow-400/50 shadow-lg';
    content.innerHTML = `
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold text-yellow-400">Skins</h2>
            <button class="w-8 h-8 rounded-full border border-yellow-400/50 text-yellow-400 flex items-center justify-center hover:bg-yellow-400/10 transition-colors" onclick="closeShopModal()">‚úï</button>
        </div>
        <div class="grid grid-cols-2 gap-4">
            <div class="border border-yellow-400/30 rounded-lg p-4 text-center bg-black hover:border-yellow-400/50 transition-colors">
                <img src="assets/dino-default.jpg" alt="Default Dino" class="w-16 h-16 mx-auto mb-2 rounded-lg">
                <div class="font-bold text-yellow-400">Default</div>
                <p class="text-gray-400 text-sm mb-4">Standard speed and protection</p>
                <button data-skin="default" class="w-full px-4 py-2 rounded-lg border border-yellow-400/50 text-yellow-400 bg-black hover:bg-yellow-400/10 transition-all"></button>
            </div>
            <div class="border border-yellow-400/30 rounded-lg p-4 text-center bg-black hover:border-yellow-400/50 transition-colors">
                <img src="assets/ninja.jpg" alt="Ninja Dino" class="w-16 h-16 mx-auto mb-2 rounded-lg">
                <div class="font-bold text-yellow-400">Ninja</div>
                <p class="text-gray-400 text-sm mb-4">üïí Slows time by 30%</p>
                <button data-skin="ninja" data-price="100" class="w-full px-4 py-2 rounded-lg border border-yellow-400/50 bg-black text-yellow-400 hover:bg-yellow-400/10 transition-all"></button>
            </div>
            <div class="border border-yellow-400/30 rounded-lg p-4 text-center bg-black hover:border-yellow-400/50 transition-colors">
                <img src="assets/robot.jpg" alt="Robot Dino" class="w-16 h-16 mx-auto mb-2 rounded-lg">
                <div class="font-bold text-yellow-400">Robot</div>
                <p class="text-gray-400 text-sm mb-4">üõ°Ô∏è One-hit protection</p>
                <button data-skin="robot" data-price="100" class="w-full px-4 py-2 rounded-lg border border-yellow-400/50 bg-black text-yellow-400 hover:bg-yellow-400/10 transition-all"></button>
            </div>
        </div>
    `;

    modal.appendChild(content);
    document.body.appendChild(modal);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ —Ñ–æ–Ω—É
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeShopModal();
        }
    });
    
    updateShopButtons();
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function openShopModal() {
    const modal = document.getElementById('shopModal');
    modal.classList.remove('hidden');
}

window.closeShopModal = function() {
    const modal = document.getElementById('shopModal');
    modal.classList.add('hidden');
}
async function loadUserSkins() {
    try {
        const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
        const response = await fetch(`/get-user-skins?telegramId=${telegramId}`);
        const data = await response.json();
        
        if (data.skins) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤
            availableSkins = data.skins.reduce((acc, skin) => {
                acc[skin] = true;
                return acc;
            }, {});
            localStorage.setItem('availableSkins', JSON.stringify(availableSkins));
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫–∏–Ω
            currentSkin = localStorage.getItem('currentDinoSkin') || 'default';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
            updateShopButtons();
        }
    } catch (error) {
        console.error('Error loading user skins:', error);
    }
}
// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é purchaseSkin
window.purchaseSkin = async function(skinName, price) {
    const button = document.querySelector(`button[data-skin="${skinName}"]`);
    if (button) {
        button.disabled = true;
        button.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    }
    
    try {
        console.log('Attempting to purchase skin:', skinName, 'for price:', price); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
        const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
        const response = await fetch(`/create-skin-invoice?telegramId=${telegramId}&stars=${price}&skinName=${skinName}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Invoice data received:', data); // –û—Ç–ª–∞–¥–æÔøΩÔøΩ–Ω—ã–π –ª–æ–≥
        
        if (!data.slug) {
            throw new Error('No slug received from server');
        }

        localStorage.setItem('pendingSkin', JSON.stringify({
            skinName: skinName,
            price: price,
            timestamp: Date.now()
        }));

        window.Telegram.WebApp.openInvoice(data.slug);
        
    } catch (error) {
        console.error('Error in purchaseSkin:', error);
        localStorage.removeItem('pendingSkin');
        window.Telegram.WebApp.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞'
        });
    } finally {
        if (button) {
            button.disabled = false;
            updateShopButtons();
        }
    }
}

function initializeGame() {
    const isMobile = window.Telegram?.WebApp?.platform !== 'desktop';
    const gameContainer = document.getElementById('game-container');
    
    if (isMobile) {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        
        if (canvas) {
            canvas.style.width = `${viewportWidth}px`;
            canvas.style.height = `${viewportHeight * 0.6}px`;
            canvas.width = viewportWidth * window.devicePixelRatio;
            canvas.height = (viewportHeight * 0.6) * window.devicePixelRatio;
            
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
            canvas_ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
        }
        
        if (gameContainer) {
            gameContainer.style.width = '100%';
            gameContainer.style.height = '60vh';
            gameContainer.style.position = 'fixed';
            gameContainer.style.top = '0';
            gameContainer.style.left = '0';
        }
    }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', initializeGame);
window.addEventListener('resize', initializeGame);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è Invoice
window.Telegram.WebApp.onEvent('invoiceClosed', async (data) => {
    console.log('Invoice closed with status:', data.status);
    
    if (data.status === 'paid') {
        try {
            const pendingSkin = localStorage.getItem('pendingSkin');
            if (!pendingSkin) return;

            const skinData = JSON.parse(pendingSkin);
            const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
            
            const response = await fetch(`/update-user-skins?telegramId=${telegramId}&skinName=${skinData.skinName}`);
            const responseData = await response.json();

            if (responseData.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–∏–Ω–∞—Ö
                availableSkins[skinData.skinName] = true;
                localStorage.setItem('availableSkins', JSON.stringify(availableSkins));
                
                // –í—ã–±–∏—Ä–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–∫–∏–Ω
                selectSkin(skinData.skinName);
                
                window.Telegram.WebApp.showPopup({
                    title: '‚ú® Success!',
                    message: 'Skin purchased successfully!'
                });
                
                updateShopButtons();
            }
        } catch (error) {
            console.error('Error activating the skin:', error);
        } finally {
            localStorage.removeItem('pendingSkin');
        }
    } else {
        localStorage.removeItem('pendingSkin');
    }
});
// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–∏–Ω–∞
window.selectSkin = function(skinName) {
    if (availableSkins[skinName]) {
        currentSkin = skinName;
        localStorage.setItem('currentDinoSkin', skinName);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ iframe –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∏–Ω–∞
        if (gameIframe && gameIframe.contentWindow) {
            gameIframe.contentWindow.postMessage({ 
                type: 'changeSkin', 
                skin: skinName 
            }, '*');
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º iframe –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (gameIframe) {
            const currentSrc = gameIframe.src;
            gameIframe.src = '';
            gameIframe.src = currentSrc;
        }
        
        updateShopButtons();
        showPopup('Skin selected successfully!');
    }
}
document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
        checkAndUpdateHearts();
        updateAvailableGamesDisplay();
    }
});
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
function updateShopButtons() {
    const modal = document.getElementById('shopModal');
    if (!modal) return;

    const buttons = modal.querySelectorAll('button[data-skin]');
    buttons.forEach(button => {
        const skinName = button.getAttribute('data-skin');
        const price = parseInt(button.getAttribute('data-price')) || 100;
        
        if (skinName) {
            if (availableSkins[skinName]) {
                if (currentSkin === skinName) {
                    button.innerHTML = 'Selected';
                    button.disabled = true;
                    button.className = 'w-full px-4 py-2 rounded-lg border border-yellow-400 text-yellow-400 bg-yellow-400/10 transition-all';
                } else {
                    button.innerHTML = 'Select';
                    button.disabled = false;
                    button.className = 'w-full px-4 py-2 rounded-lg border border-yellow-400/50 text-yellow-400 bg-black hover:bg-yellow-400/10 transition-all';
                    button.onclick = () => selectSkin(skinName);
                }
            } else {
                button.className = 'w-full px-4 py-2 rounded-lg border border-yellow-400/50 bg-black text-yellow-400 hover:bg-yellow-400/10 transition-all';
                button.innerHTML = `<span class="flex items-center justify-center"><span class="mr-2">${price}</span><span>‚≠êÔ∏è</span></span>`;
                button.onclick = () => purchaseSkin(skinName, price);
            }
        }
    });
}
export {
    loadGame,
    updateAvailableGamesDisplay,
    updateTimer,
    updateGameTaskProgress,
    startGameTaskTimer
};
