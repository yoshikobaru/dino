let totalDPS = parseInt(localStorage.getItem('totalDPS')) || 0;
//let totalGameEarnings = parseInt(localStorage.getItem('totalGameEarnings')) || 0;
let availableGames = parseInt(localStorage.getItem('availableGames')) || 0; // –ò–∑–º–µ–Ω–µ–Ω–æ: –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
let nextHeartTime = parseInt(localStorage.getItem('nextHeartTime')) || Date.now(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∏ 0 —Å–µ—Ä–¥—Ü–∞—Ö –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è 0
if (availableGames === 0) {
    availableGames = 0; // –°–æ—Ö—Ä–∞–Ω—è–µ–º 0 –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
let timerActive = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–¥—Ü–∞
let heartTimers = [];
let lastHeartRecoveryTime = 0;

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ:
let tasks = JSON.parse(localStorage.getItem('dailyTasks')) || { daily: [] };

// –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞:
let playedCount = parseInt(localStorage.getItem('playedCount')) || 0;

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
let gameProgress = parseInt(localStorage.getItem('gameProgress')) || 0;
let gameTaskTimer = null;
let gameTaskStartTime = parseInt(localStorage.getItem('gameTaskStartTime')) || 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
function updateTimer() {
    const now = Date.now();
    let updated = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 20 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–¥—Ü–∞
    if (heartTimers.length > 0 && now - lastHeartRecoveryTime >= 20000) {
        if (availableGames < 5) {
            availableGames++;
            updated = true;
        }
        heartTimers.shift(); // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        lastHeartRecoveryTime = now; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    }

    if (updated) {
        saveGameState();
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const nextRecoveryTime = lastHeartRecoveryTime + 20000;
    const remainingTime = Math.max(0, Math.ceil((nextRecoveryTime - now) / 1000));
    const minutes = Math.floor(remainingTime / 60);
    const seconds = remainingTime % 60;

    return {
        time: `${minutes}:${seconds.toString().padStart(2, '0')}`,
        availableGames: availableGames
    };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è DOM
let timerInterval = setInterval(() => {
    const timerData = updateTimer();
    
    if (document.getElementById('timer')) {
        document.getElementById('timer').textContent = availableGames < 5 ? `–°–ª–µ–¥—É—é—â–µ–µ —Å–µ—Ä–¥—Ü–µ —á–µ—Ä–µ–∑: ${timerData.time}` : '';
    }
    if (document.getElementById('lives')) {
        document.getElementById('lives').innerHTML = '‚ù§Ô∏è'.repeat(timerData.availableGames) + 'üñ§'.repeat(5 - timerData.availableGames);
    }
}, 1000);

document.addEventListener('DOMContentLoaded', () => {
    const gamePage = document.getElementById('game-page');
    const gameContainer = document.getElementById('gameContainer');
    const startButton = document.getElementById('startButton');
    const livesDisplay = document.getElementById('lives');
    const timerDisplay = document.createElement('div');
    timerDisplay.id = 'timer';
    livesDisplay.parentNode.insertBefore(timerDisplay, livesDisplay.nextSibling);
    
    let gameIframe;

    function loadGame() {
        if (!gameIframe) {
            gameIframe = document.createElement('iframe');
            gameIframe.src = 'game/index.html';
            gameIframe.style.width = '100%';
            gameIframe.style.height = '300px';
            gameIframe.style.border = 'none';
            gameContainer.appendChild(gameIframe);
        }
    }

    function updateAvailableGames() {
        const availableGamesElement = document.querySelector('#lives'); // –ò—Å–ø—Ä–∞–≤–ª: –¥–æ–±–∞–≤–ª–µ–Ω id 'lives'
        
        if (availableGamesElement) {
            availableGamesElement.innerHTML = '‚ù§Ô∏è'.repeat(availableGames) + 'üñ§'.repeat(5 - availableGames);
        }
    }

    function updateAvailableGamesDisplay() {
        const timerData = updateTimer();
        livesDisplay.innerHTML = '‚ù§Ô∏è'.repeat(timerData.availableGames) + 'üñ§'.repeat(5 - timerData.availableGames);
        
        if (timerData.availableGames < 5) {
            timerDisplay.textContent = `–°–ª–µ–¥—É—é—â–µ–µ —Å–µ—Ä–¥—Ü–µ —á–µ—Ä–µ–∑: ${timerData.time}`;
            timerDisplay.style.display = 'block';
        } else {
            timerDisplay.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ 5 —Å–µ—Ä–¥–µ—Ü
        }
    }

    function startGame() {
        if (availableGames > 0) {
            const taskCooldown = parseInt(localStorage.getItem('gameTaskCooldown')) || 0;
            const currentTime = Date.now();
            
            availableGames--;
            heartTimers.push(Date.now());
            if (heartTimers.length === 1) {
                lastHeartRecoveryTime = Date.now();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É–ª–¥–∞—É–Ω–∞
            if (taskCooldown <= currentTime) {
                gameProgress = parseInt(localStorage.getItem('gameProgress')) || 0;
                
                if (gameProgress === 0) {
                    gameTaskStartTime = Date.now();
                    localStorage.setItem('gameTaskStartTime', gameTaskStartTime);
                    startGameTaskTimer();
                }
                
                if (gameProgress < 5) {
                    gameProgress++;
                    localStorage.setItem('gameProgress', gameProgress.toString());
                }
            }
            
            saveGameState();
            updateAvailableGamesDisplay();
            startButton.style.display = 'none';
            
            if (gameIframe && gameIframe.contentWindow) {
                gameIframe.contentWindow.postMessage({ type: 'slowDown' }, '*');
                gameIframe.contentWindow.main();
            }
            
            playedCount++;
            localStorage.setItem('playedCount', playedCount.toString());
            updatePlayedCountTask();
        }
    }

    startButton.addEventListener('click', startGame);

    window.addEventListener('message', (event) => {
        if (event.data.type === 'gameOver') {
            if (availableGames > 0) {
                startButton.style.display = 'block';
            } else {
                startButton.style.display = 'none';
                livesDisplay.innerHTML = '–ò–≥—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∫ –æ–±—â–µ–º—É –±–∞–ª–∞–Ω—Å—É
            const gameScore = event.data.score;
            totalDPS += gameScore;
            let totalGameEarnings = parseInt(localStorage.getItem('totalGameEarnings')) || 0;
            totalGameEarnings += gameScore;
            localStorage.setItem('totalDPS', totalDPS);
            localStorage.setItem('totalGameEarnings', totalGameEarnings);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
            updateTotalScore();
            updateGameEarningsDisplay();
            updateGameScoreDisplay();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—á–∫–∞—Ö
            alert(`–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${gameScore} DPS! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${totalDPS} DPS`);
            
            updatePlayedCountTask();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
            const highScore = parseInt(localStorage.getItem('project.github.chrome_dino.high_score')) || 0;
            if (gameScore > highScore) {
                localStorage.setItem('project.github.chrome_dino.high_score', gameScore.toString());
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 500 –∏ 1000 DPS
                if (gameScore >= 1000) {
                    const record1000DPSCompleted = localStorage.getItem('record1000DPSCompleted') === 'true';
                    if (!record1000DPSCompleted) {
                        alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–±—Ä–∞–ª–∏ 1000 DPS –∑–∞ –∏–≥—Ä—É. –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –≤ –∑–∞–¥–∞–Ω–∏—è—Ö!');
                    }
                } else if (gameScore >= 500) {
                    const record500DPSCompleted = localStorage.getItem('record500DPSCompleted') === 'true';
                    if (!record500DPSCompleted) {
                        alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–±—Ä–∞–ª–∏ 500 DPS –∑–∞ –∏–≥—Ä—É. –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –≤ –∑–∞–¥–∞–Ω–∏—è—Ö!');
                    }
                }
            }
        }
    });

    document.querySelector('button[data-page="game"]').addEventListener('click', () => {
        if (gamePage.style.display !== 'none') {
            loadGame();
            updateAvailableGames();
            updateAvailableGamesDisplay();
            updateTimer();
            if (availableGames > 0) {
                startButton.style.display = 'block';
            } else {
                startButton.style.display = 'none';
                livesDisplay.innerHTML = '–ò–≥—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å';
            }
        }
    });

    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('DOMContentLoaded', () => {
        updateAvailableGames(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ä–¥–µ—Ü –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        updateGameEarningsDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –∑–∞ –∏–≥—Ä—ã
    });
});
//let totalGameEarnings = parseInt(localStorage.getItem('totalGameEarnings')) || 0;
function updateGameEarningsDisplay() {
    const gameEarningsElements = document.querySelectorAll('.bg-yellow-400 .text-sm.font-bold.text-black');
    gameEarningsElements.forEach(element => {
        const parentDiv = element.closest('.bg-yellow-400');
        const labelElement = parentDiv.querySelector('.text-xs.text-black');
        if (labelElement && labelElement.textContent.trim() === 'Game') {
            element.textContent = `+${totalGameEarnings} DPS`;
        }
    });
}
function updateTotalScore() {
    const totalScoreElement = document.querySelector('.text-3xl.font-bold.text-black');
    if (totalScoreElement) {
        totalScoreElement.textContent = `${totalDPS} DPS`;
    }
}


// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç–∞, —á–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.updateTotalScore = updateTotalScore;
window.updateGameEarningsDisplay = updateGameEarningsDisplay;

// –§—É–Ω–∫—Ü—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∂–µ–Ω–∏—è –æ—á–∫–æ–≤ –∑–∞ –∏–≥—Ä—É
function updateGameScoreDisplay() {
    const gameScoreElement = document.getElementById('gameScore');
    const totalGameEarnings = parseInt(localStorage.getItem('totalGameEarnings')) || 0; // –ü–æ–ª—É—á–∞–µ–º –∏–∑ localStorage
    if (gameScoreElement) {
        gameScoreElement.textContent = `+${totalGameEarnings} DPS`; // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–∏–µ
    }
}

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
document.addEventListener('DOMContentLoaded', () => {
    const savedTimers = JSON.parse(localStorage.getItem('heartTimers')) || [];
    heartTimers = savedTimers;
    availableGames = parseInt(localStorage.getItem('availableGames')) || 5;
    lastHeartRecoveryTime = parseInt(localStorage.getItem('lastHeartRecoveryTime')) || 0;
    updateTimer(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
});

function saveGameState() {
    localStorage.setItem('availableGames', availableGames);
    localStorage.setItem('heartTimers', JSON.stringify(heartTimers));
    localStorage.setItem('lastHeartRecoveryTime', lastHeartRecoveryTime);
}

// –ò–∑–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadGameState
function loadGameState() {
    const savedAvailableGames = localStorage.getItem('availableGames');
    const savedHeartTimers = localStorage.getItem('heartTimers');
    const savedLastHeartRecoveryTime = localStorage.getItem('lastHeartRecoveryTime');

    if (savedAvailableGames !== null) {
        availableGames = parseInt(savedAvailableGames);
    } else {
        availableGames = 5; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 5 —Å–µ—Ä–¥–µ—Ü —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    }
    if (savedHeartTimers !== null) {
        heartTimers = JSON.parse(savedHeartTimers);
    }
    if (savedLastHeartRecoveryTime !== null) {
        lastHeartRecoveryTime = parseInt(savedLastHeartRecoveryTime);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    updateTimer();
    updateAvailableGamesDisplay();
}

// –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è DOMContentLoaded
document.addEventListener('DOMContentLoaded', () => {
    loadGameState(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    updateAvailableGames(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ä–¥–µ—Ü
    updateGameEarningsDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –∑–∞ –∏–≥—Ä—ã
    updateTaskEarningsDisplay(); // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏—è
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.updateTaskEarningsDisplay = updateTaskEarningsDisplay;

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
function updateGameTaskProgress() {
    const gameTask = tasks.daily.find(task => task.name === "–°—ã–≥—Ä–∞—Ç—å 5 —Ä–∞–∑");
    if (gameTask && gameTask.cooldown <= 0) {
        if (!gameTask.isTimerRunning) {
            startGameTaskTimer();
        }
        gameTask.progress++;
        if (gameTask.progress === gameTask.maxProgress) {
            clearTimeout(gameTask.timer);
            gameTask.isTimerRunning = false;
        }
        renderTasks('daily');
        saveDailyTasks();
    }
}

// –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é startGame
function startGame() {
    if (availableGames > 0) {
        const taskCooldown = parseInt(localStorage.getItem('gameTaskCooldown')) || 0;
        const currentTime = Date.now();
        
        availableGames--;
        heartTimers.push(Date.now());
        if (heartTimers.length === 1) {
            lastHeartRecoveryTime = Date.now();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É–ª–¥–∞—É–Ω–∞
        if (taskCooldown <= currentTime) {
            gameProgress = parseInt(localStorage.getItem('gameProgress')) || 0;
            
            if (gameProgress === 0) {
                gameTaskStartTime = Date.now();
                localStorage.setItem('gameTaskStartTime', gameTaskStartTime);
                startGameTaskTimer();
            }
            
            if (gameProgress < 5) {
                gameProgress++;
                localStorage.setItem('gameProgress', gameProgress.toString());
            }
        }
        
        saveGameState();
        updateAvailableGamesDisplay();
        startButton.style.display = 'none';
        
        if (gameIframe && gameIframe.contentWindow) {
            gameIframe.contentWindow.postMessage({ type: 'slowDown' }, '*');
            gameIframe.contentWindow.main();
        }
        
        playedCount++;
        localStorage.setItem('playedCount', playedCount.toString());
        updatePlayedCountTask();
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
function startGameTaskTimer() {
    if (gameTaskTimer) {
        clearTimeout(gameTaskTimer);
    }
    
    gameTaskTimer = setTimeout(() => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –º–∏–Ω—É—Ç—ã
        gameProgress = 0;
        localStorage.setItem('gameProgress', gameProgress);
        gameTaskStartTime = 0;
        localStorage.setItem('gameTaskStartTime', gameTaskStartTime);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        renderTasks('daily');
    }, 60000); // 1 –º–∏–Ω—É—Ç–∞
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
function checkGameTaskTime() {
    if (gameTaskStartTime > 0) {
        const now = Date.now();
        const timeElapsed = now - gameTaskStartTime;
        
        if (timeElapsed >= 60000) { // –ü—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞
            gameProgress = 0;
            localStorage.setItem('gameProgress', gameProgress);
            gameTaskStartTime = 0;
            localStorage.setItem('gameTaskStartTime', gameTaskStartTime);
            if (gameTaskTimer) {
                clearTimeout(gameTaskTimer);
            }
        }
    }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
function startGameTaskTimer() {
    const gameTask = tasks.daily.find(task => task.name === "–°—ã–≥—Ä–∞—Ç—å 5 —Ä–∞–∑");
    if (gameTask && !gameTask.isTimerRunning) {
        gameTask.isTimerRunning = true;
        gameTask.timerStartTime = Date.now();
        gameTask.timer = setTimeout(() => {
            gameTask.isTimerRunning = false;
            gameTask.progress = 0;
            renderTasks('daily');
            saveDailyTasks();
        }, 60000); // 1 –º–∏–Ω—É—Ç–∞
        saveDailyTasks();
    }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ game.js
function renderTasks(category) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ main.js
}

function saveDailyTasks() {
    localStorage.setItem('dailyTasks', JSON.stringify(tasks));
}

// –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é:
function updatePlayedCountTask() {
    const playedCountTask = tasks.daily.find(task => task.name === "–°—ã–≥—Ä–∞—Ç—å 25 —Ä–∞–∑");
    if (playedCountTask) {
        playedCountTask.playedCount = playedCount;
        if (playedCount >= 25) {
            playedCountTask.isCompleted = true;
        }
        renderTasks('daily');!
        saveDailyTasks();
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Ä–µ–∫–æ—Ä–¥ DPS
function checkAndCompleteRecordTask(taskName) {
    const task = tasks.daily.find(t => t.name === taskName);
    if (!task || task.isCompleted) return;

    const requiredScore = taskName === "–ù–∞–±—Ä–∞—Ç—å 500 DPS –∑–∞ –∏–≥—Ä—É" ? 500 : 1000;
    const highScore = parseInt(localStorage.getItem('project.github.chrome_dino.high_score')) || 0;
    const taskCompletedKey = `record${requiredScore}DPSCompleted`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
    if (localStorage.getItem(taskCompletedKey) === 'true') {
        alert('–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
        return;
    }

    // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ—Ä–¥–∞
    if (highScore < requiredScore) {
        alert(`–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥: ${highScore} DPS. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å ${requiredScore} DPS!`);
        return;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ –Ω–∞ 1000 DPS
    if (requiredScore === 1000) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ 500 DPS
        if (localStorage.getItem('record500DPSCompleted') !== 'true') {
            alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ "–ù–∞–±—Ä–∞—Ç—å 500 DPS –∑–∞ –∏–≥—Ä—É"!');
            return;
        }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    task.isCompleted = true;
    localStorage.setItem(taskCompletedKey, 'true');
    totalDPS += task.dps;
    totalTaskEarnings += task.dps;
    
    localStorage.setItem('totalDPS', totalDPS.toString());
    localStorage.setItem('totalTaskEarnings', totalTaskEarnings.toString());
    
    updateTotalScore();
    updateTaskEarningsDisplay();
    renderTasks('daily');
    saveTasks();
    
    alert(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${task.dps} DPS –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è "${taskName}"!`);
}

